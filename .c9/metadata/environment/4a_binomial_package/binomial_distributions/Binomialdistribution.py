{"changed":true,"filter":false,"title":"Binomialdistribution.py","tooltip":"/4a_binomial_package/binomial_distributions/Binomialdistribution.py","value":"import math\nimport matplotlib.pyplot as plt\nfrom .Generaldistribution import Distribution\n\nclass Binomial(Distribution):\n    \"\"\" Binomial distribution class for calculating and \n    visualizing a Binomial distribution.\n    \n    Attributes:\n        mean (float) representing the mean value of the distribution\n        stdev (float) representing the standard deviation of the distribution\n        data_list (list of floats) a list of floats to be extracted from the data file\n        p (float) representing the probability of an event occurring\n        n (int) the total number of trials\n    \n    \n    TODO: Fill out all TODOs in the functions below\n            \n    \"\"\"\n    \n    #       A binomial distribution is defined by two variables: \n    #           the probability of getting a positive outcome\n    #           the number of trials\n    \n    #       If you know these two values, you can calculate the mean and the standard deviation\n    #       \n    #       For example, if you flip a fair coin 25 times, p = 0.5 and n = 25\n    #       You can then calculate the mean and standard deviation with the following formula:\n    #           mean = p * n\n    #           standard deviation = sqrt(n * p * (1 - p))\n    \n    #       \n    \n    def __init__(self, prob=.5, size=20):\n        Distribution.__init__(self, prob=.5, size=20)\n        \n        # TODO: store the probability of the distribution in an instance variable p\n        # TODO: store the size of the distribution in an instance variable n\n        \n        # TODO: Now that you know p and n, you can calculate the mean and standard deviation\n        #       Use the calculate_mean() and calculate_stdev() methods to calculate the\n        #       distribution mean and standard deviation\n        #\n        #       Then use the init function from the Distribution class to initialize the\n        #       mean and the standard deviation of the distribution\n        #\n        #       Hint: You need to define the calculate_mean() and calculate_stdev() methods\n        #               farther down in the code starting in line 55. \n        #               The init function can get access to these methods via the self\n        #               variable.   \n        \n        #\tDistribution.__init__(self, prob, sigma)\n        self.p = prob\n        self.n = size\n        self.mean = self.calculate_mean()\n        self.stdev = self.calculate_stdev()\n        \n        pass            \n    \n    def calculate_mean(self):\n    \n        \"\"\"Function to calculate the mean from p and n\n        \n        Args: \n            None\n        \n        Returns: \n            float: mean of the data set\n    \n        \"\"\"\n        self.mean = self.p * self.n\n        return self.mean\n        # TODO: calculate the mean of the Binomial distribution. Store the mean\n        #       via the self variable and also return the new mean value\n                \n        #pass \n\n\n\n    def calculate_stdev(self):\n\n        \"\"\"Function to calculate the standard deviation from p and n.\n        \n        Args: \n            None\n        \n        Returns: \n            float: standard deviation of the data set\n    \n        \"\"\"\n        \n        # TODO: calculate the standard deviation of the Binomial distribution. Store\n        #       the result in the self standard deviation attribute. Return the value\n        #       of the standard deviation.\n        #pass\n        self.stdev = math.sqrt(self.n * self.p * (1 - self.p))\n        return self.stdev\n        \n        \n    def replace_stats_with_data(self):\n    \n        \"\"\"Function to calculate p and n from the data set\n        \n        Args: \n            None\n        \n        Returns: \n            float: the p value\n            float: the n value\n    \n        \"\"\"        \n        return self.p, self.n\n        \n        # TODO: The read_data_file() from the Generaldistribution class can read in a data\n        #       file. Because the Binomaildistribution class inherits from the Generaldistribution class,\n        #       you don't need to re-write this method. However,  the method\n        #       doesn't update the mean or standard deviation of\n        #       a distribution. Hence you are going to write a method that calculates n, p, mean and\n        #       standard deviation from a data set and then updates the n, p, mean and stdev attributes.\n        #       Assume that the data is a list of zeros and ones like [0 1 0 1 1 0 1]. \n        #\n        #       Write code that: \n        #           updates the n attribute of the binomial distribution\n        #           updates the p value of the binomial distribution by calculating the\n        #               number of positive trials divided by the total trials\n        #           updates the mean attribute\n        #           updates the standard deviation attribute\n        #\n        #       Hint: You can use the calculate_mean() and calculate_stdev() methods\n        #           defined previously.\n        #pass\n        \n    def plot_bar(self):\n        \"\"\"Function to output a histogram of the instance variable data using \n        matplotlib pyplot library.\n        \n        Args:\n            None\n            \n        Returns:\n            None\n        \"\"\"\n            \n        # TODO: Use the matplotlib package to plot a bar chart of the data\n        #       The x-axis should have the value zero or one\n        #       The y-axis should have the count of results for each case\n        #\n        #       For example, say you have a coin where heads = 1 and tails = 0.\n        #       If you flipped a coin 35 times, and the coin landed on\n        #       heads 20 times and tails 15 times, the bar chart would have two bars:\n        #       0 on the x-axis and 15 on the y-axis\n        #       1 on the x-axis and 20 on the y-axis\n        \n        #       Make sure to label the chart with a title, x-axis label and y-axis label\n        #pass \n        \n        plt.hist(self.data)\n        plt.xlabel(\"xlabel\")\n        plt.ylabel(\"ylabel\")\n        plt.title(\"title\")\n        \n    def pdf(self, k):\n        \"\"\"Probability density function calculator for the gaussian distribution.\n        \n        Args:\n            k (float): point for calculating the probability density function\n            \n        \n        Returns:\n            float: probability density function output\n        \"\"\"\n        pdf =  (1.0 / (self.stdev * math.sqrt(2*math.pi))) * math.exp(-0.5*((k - self.mean) / self.stdev) ** 2)\n        \n        return pdf\n        # TODO: Calculate the probability density function for a binomial distribution\n        #  For a binomial distribution with n trials and probability p, \n        #  the probability density function calculates the likelihood of getting\n        #   k positive outcomes. \n        # \n        #   For example, if you flip a coin n = 60 times, with p = .5,\n        #   what's the likelihood that the coin lands on heads 40 out of 60 times?\n        \n        #pass        \n\n    def plot_bar_pdf(self):\n\n        \"\"\"Function to plot the pdf of the binomial distribution\n        \n        Args:\n            None\n        \n        Returns:\n            list: x values for the pdf plot\n            list: y values for the pdf plot\n            \n        \"\"\"\n        min_range = min(self.data)\n        max_range = max(self.data)\n        interval = 1.0 * (max_range - min_range) / n\n        \n        x = []\n        y = []\n        \n        for i in range(n):\n        \t\ttmp = min_range + interval*i\n        \t\tx.append(tmp)\n        \t\ty.append(self.pdf(tmp))\n       \n        plt.bar(x, y)\n        plt.set_xlabel(\"k Distribution\")\n        plt.set_ylabel(\"Density\")\n        plt.set_title(\"Normed Barchart of Data\")\n        plt.show()\n\t\t\n        return x, y\n        # TODO: Use a bar chart to plot the probability density function from\n        # k = 0 to k = n\n        \n        #   Hint: You'll need to use the pdf() method defined above to calculate the\n        #   density function for every value of k.\n        \n        #   Be sure to label the bar chart with a title, x label and y label\n\n        #   This method should also return the x and y values used to make the chart\n        #   The x and y values should be stored in separate lists\n                \n    def __add__(self, other):\n        \n        \"\"\"Function to add together two Binomial distributions with equal p\n        \n        Args:\n            other (Binomial): Binomial instance\n            \n        Returns:\n            Binomial: Binomial distribution\n            \n        \"\"\"\n        \n        try:\n            assert self.p == other.p, 'p values are not equal'\n        except AssertionError as error:\n            raise\n        \n        sbd = Distribution()\n        sbd.n = self.n + other.n\n        sbd.p = self.p\n        \n        return sbd\n        \n        # TODO: Define addition for two binomial distributions. Assume that the\n        # p values of the two distributions are the same. The formula for \n        # summing two binomial distributions with different p values is more complicated,\n        # so you are only expected to implement the case for two distributions with equal p.\n        \n        # the try, except statement above will raise an exception if the p values are not equal\n        \n        # Hint: You need to instantiate a new binomial object with the correct n, p, \n        #   mean and standard deviation values. The __add__ method should return this\n        #   new binomial object.\n        \n        #   When adding two binomial distributions, the p value remains the same\n        #   The new n value is the sum of the n values of the two distributions.\n                \n        #pass\n        \n        \n    def __repr__(self):\n    \n        \"\"\"Function to output the characteristics of the Binomial instance\n        \n        Args:\n            None\n        \n        Returns:\n            string: characteristics of the Gaussian\n        \n        \"\"\"\n        return \"mean {}, standard deviation {}, p {}, n {}\".format(self.mean, self.stdev, self.p, self.n)\n\n        # TODO: Define the representation method so that the output looks like\n        #       mean 5, standard deviation 4.5, p .8, n 20\n        #\n        #       with the values replaced by whatever the actual distributions values are\n        #       The method should return a string in the expected format\n    \n        #pass\n","undoManager":{"mark":-2,"position":2,"stack":[[{"start":{"row":2,"column":6},"end":{"row":2,"column":36},"action":"remove","lines":["Binomialdistribution_challenge"],"id":2},{"start":{"row":2,"column":6},"end":{"row":2,"column":7},"action":"insert","lines":["G"]},{"start":{"row":2,"column":7},"end":{"row":2,"column":8},"action":"insert","lines":["e"]},{"start":{"row":2,"column":8},"end":{"row":2,"column":9},"action":"insert","lines":["n"]},{"start":{"row":2,"column":9},"end":{"row":2,"column":10},"action":"insert","lines":["e"]},{"start":{"row":2,"column":10},"end":{"row":2,"column":11},"action":"insert","lines":["r"]},{"start":{"row":2,"column":11},"end":{"row":2,"column":12},"action":"insert","lines":["a"]},{"start":{"row":2,"column":12},"end":{"row":2,"column":13},"action":"insert","lines":["l"]}],[{"start":{"row":2,"column":13},"end":{"row":2,"column":14},"action":"insert","lines":["d"],"id":3},{"start":{"row":2,"column":14},"end":{"row":2,"column":15},"action":"insert","lines":["i"]},{"start":{"row":2,"column":15},"end":{"row":2,"column":16},"action":"insert","lines":["s"]},{"start":{"row":2,"column":16},"end":{"row":2,"column":17},"action":"insert","lines":["t"]},{"start":{"row":2,"column":17},"end":{"row":2,"column":18},"action":"insert","lines":["r"]},{"start":{"row":2,"column":18},"end":{"row":2,"column":19},"action":"insert","lines":["i"]},{"start":{"row":2,"column":19},"end":{"row":2,"column":20},"action":"insert","lines":["b"]},{"start":{"row":2,"column":20},"end":{"row":2,"column":21},"action":"insert","lines":["u"]},{"start":{"row":2,"column":21},"end":{"row":2,"column":22},"action":"insert","lines":["t"]}],[{"start":{"row":2,"column":22},"end":{"row":2,"column":23},"action":"insert","lines":["i"],"id":4},{"start":{"row":2,"column":23},"end":{"row":2,"column":24},"action":"insert","lines":["o"]},{"start":{"row":2,"column":24},"end":{"row":2,"column":25},"action":"insert","lines":["n"]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":2,"column":25},"end":{"row":2,"column":25},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1659329699601}